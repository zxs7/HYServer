!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_POOL_SIZE	pooledBuffer.h	15;"	d
CC	Makefile	/^CC = gcc$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g $/;"	m
DETECT_INTERVAL	detectTimeOut.h	22;"	d
DEVCIE_MESSAGE_LISTEN_MAX	deviceMessage.h	36;"	d
DEVICEID_SIZE	device.h	16;"	d
DEVICETABLE_SIZE	device.h	17;"	d
DEVICE_MESSAGE_DEBUG	deviceMessage.h	31;"	d
DEVICE_MESSAGE_THREAD_SIZE	deviceMessage.h	35;"	d
IDRegister	register.c	/^void IDRegister(char *ip, int port, char *newID)$/;"	f
MEMBLOCK_SIZE	pooledBuffer.h	14;"	d
MESSAGELEN_SIZE	deviceMessage.h	40;"	d
MESSAGE_HEAD_SIZE	deviceMessage.h	41;"	d
MESSAGE_TYPE_SIZE	deviceMessage.h	38;"	d
MemBlock	pooledBuffer.h	/^typedef struct MemBlock$/;"	s
MemBlock	pooledBuffer.h	/^}MemBlock; $/;"	t	typeref:struct:MemBlock
MemPool	pooledBuffer.h	/^typedef struct MemPool$/;"	s
MemPool	pooledBuffer.h	/^}MemPool;$/;"	t	typeref:struct:MemPool
OBJS	Makefile	/^OBJS = server.o deviceMessage.o device.o socketTools.o epollTools.o register.o hash.o detectTimeOut.o userMessage.o pooledBuffer.o$/;"	m
PASSWORD_SIZE	device.h	15;"	d
Pstack	deviceMessage.h	/^typedef struct Pstack$/;"	s
Pstack	deviceMessage.h	/^}Pstack;$/;"	t	typeref:struct:Pstack
Pstack_empty	deviceMessage.c	/^int Pstack_empty(Pstack *ps)$/;"	f
Pstack_pop	deviceMessage.c	/^void Pstack_pop(Pstack *ps)$/;"	f
Pstack_push	deviceMessage.c	/^void Pstack_push(Pstack *ps, int k)$/;"	f
Pstack_top	deviceMessage.c	/^int Pstack_top(Pstack *ps)$/;"	f
TARGET	Makefile	/^TARGET = server$/;"	m
TIMEOUT_DEBUG	detectTimeOut.h	18;"	d
TIMEOUT_INTERVAL	detectTimeOut.h	21;"	d
USERSOCKFD_SIZE	deviceMessage.h	39;"	d
USER_MESSAGE_DEBUG	userMessage.h	26;"	d
USER_MESSAGE_LISTEN_MAX	userMessage.h	30;"	d
USER_MESSAGE_THREAD_SIZE	userMessage.h	29;"	d
Ustack	userMessage.h	/^typedef struct Ustack$/;"	s
Ustack	userMessage.h	/^}Ustack;$/;"	t	typeref:struct:Ustack
Ustack_empty	userMessage.c	/^int Ustack_empty(Ustack *ps)$/;"	f
Ustack_pop	userMessage.c	/^void Ustack_pop(Ustack *ps)$/;"	f
Ustack_push	userMessage.c	/^void Ustack_push(Ustack *ps, int k)$/;"	f
Ustack_top	userMessage.c	/^int Ustack_top(Ustack *ps)$/;"	f
_DETECT_TIME_OUT_H	detectTimeOut.h	4;"	d
_DEVICEMESSAGE_H	deviceMessage.h	4;"	d
_DEVICE_H	device.h	4;"	d
_EPOLLTOOLS_H	epollTools.h	4;"	d
_HASH_H	hash.h	4;"	d
_POOLED_BUFFER_H	pooledBuffer.h	4;"	d
_REGISTER_H	register.h	4;"	d
_SERVER_H	server.h	3;"	d
_SOCKET_TOOL_H	socketTools.h	5;"	d
_USER_MESSAGE_H	userMessage.h	4;"	d
addEpollEvent	epollTools.c	/^int addEpollEvent(int epfd, int fd, struct epoll_event *event)$/;"	f
allocateBlock	pooledBuffer.c	/^MemBlock *allocateBlock()$/;"	f
analysisHeartBeatMessage	deviceMessage.c	/^void analysisHeartBeatMessage(char *message, char *deviceId, char *password)$/;"	f
analysisMessageToUser	deviceMessage.c	/^void analysisMessageToUser(char *recvBuffer, int *userSockfd, int *messageLen)$/;"	f
analysisUserMessage	userMessage.c	/^void analysisUserMessage(char *recvBuffer, char *deviceId, int *messageLen)$/;"	f
blockNumber	pooledBuffer.h	/^	int blockNumber;		\/* number of MemBlocks in current buffer pool *\/$/;"	m	struct:MemPool
buffer	pooledBuffer.h	/^	char buffer[MEMBLOCK_SIZE];	\/* buffer of current block *\/$/;"	m	struct:MemBlock
bufferPool	pooledBuffer.c	/^MemPool *bufferPool;		\/* buffer pool for the whole server *\/$/;"	v
createAndBind	socketTools.c	/^int createAndBind(int serverPort)$/;"	f
createAndConnect	socketTools.c	/^int createAndConnect(char *serverIP, int serverPort)$/;"	f
createDevice	device.c	/^deviceNode* createDevice(int sockfd)$/;"	f
decreaseBufferPool	pooledBuffer.c	/^int decreaseBufferPool(int number)$/;"	f
deleteDevice	device.c	/^void deleteDevice(deviceNode* device, int epfd)$/;"	f
deleteEpollEvent	epollTools.c	/^int deleteEpollEvent(int epfd, int fd)$/;"	f
destroyBufferPool	pooledBuffer.c	/^void destroyBufferPool()$/;"	f
detectTimeOutThread	detectTimeOut.c	/^void *detectTimeOutThread()$/;"	f
deviceEpollfd	deviceMessage.c	/^int deviceEpollfd;								\/* device epoll socket fd *\/$/;"	v
deviceId	device.h	/^	char deviceId[DEVICEID_SIZE+1];		\/* deviceId *\/$/;"	m	struct:deviceNode
deviceList	device.h	/^typedef struct deviceList$/;"	s
deviceList	device.h	/^}deviceList;$/;"	t	typeref:struct:deviceList
deviceListenPort	deviceMessage.c	/^const int deviceListenPort = 8000;				\/* device listen port *\/$/;"	v
deviceListenThread	deviceMessage.c	/^void *deviceListenThread()$/;"	f
deviceListenThreadId	deviceMessage.c	/^pthread_t deviceListenThreadId;		\/* device listen thread id *\/$/;"	v
deviceNode	device.h	/^typedef struct deviceNode$/;"	s
deviceNode	device.h	/^}deviceNode;$/;"	t	typeref:struct:deviceNode
deviceSockfd	device.h	/^	int deviceSockfd;					\/* socket fd of device *\/$/;"	m	struct:deviceNode
deviceTable	device.h	/^typedef struct deviceTable$/;"	s
deviceTable	device.h	/^}deviceTable;$/;"	t	typeref:struct:deviceTable
deviceThreadInfo	deviceMessage.h	/^typedef struct deviceThreadInfo$/;"	s
deviceThreadInfo	deviceMessage.h	/^}deviceThreadInfo;$/;"	t	typeref:struct:deviceThreadInfo
deviceThreadInfoTable	deviceMessage.c	/^deviceThreadInfo deviceThreadInfoTable[DEVICE_MESSAGE_THREAD_SIZE+1];		\/* parameter table of threads which receive message from devcie *\/$/;"	v
findDevice	device.c	/^deviceNode* findDevice(deviceTable *dt, char *deviceID)$/;"	f
findDevicePrior	device.c	/^deviceNode* findDevicePrior(deviceTable *dt, char *deviceID)$/;"	f
freeDeviceThreadStack	deviceMessage.c	/^Pstack freeDeviceThreadStack;					\/* free stack of threads which receive message from device *\/$/;"	v
freeDeviceThreadStackMutex	deviceMessage.c	/^pthread_mutex_t	freeDeviceThreadStackMutex;		\/* clock of free stack of threads which receive message from device *\/$/;"	v
freeUserThreadStack	userMessage.c	/^Ustack freeUserThreadStack;					\/* free stack of threads which receive message from users *\/$/;"	v
freeUserThreadStackMutex	userMessage.c	/^pthread_mutex_t	freeUserThreadStackMutex;	\/* clock of free stack of threads which receive message from users *\/$/;"	v
getPeerAddress	socketTools.c	/^void getPeerAddress(int fd, char *ip, int *port)$/;"	f
hashFunction	hash.c	/^unsigned int hashFunction(const void *key, int keylen) $/;"	f
hashFunctionSeed	hash.c	/^static uint32_t hashFunctionSeed = 5381;$/;"	v	file:
hashMask	device.h	/^	int hashMask;						\/* mask of hashï¼Œequals to size-1 *\/$/;"	m	struct:deviceTable
head	device.h	/^	deviceNode head;					\/* head of current list *\/$/;"	m	struct:deviceList
head	pooledBuffer.h	/^	MemBlock *head;			\/* pointer to the first MemBlock in current buffer pool *\/$/;"	m	struct:MemPool
head	pooledBuffer.h	/^	MemBlock *head;			\/* pointer to the first MemBlock in those are used by current socket *\/$/;"	m	struct:socketBuffer
increaseBufferPool	pooledBuffer.c	/^int increaseBufferPool(int number)$/;"	f
index	deviceMessage.h	/^	int index;						\/* id of current thread *\/$/;"	m	struct:deviceThreadInfo
index	userMessage.h	/^	int index;						\/* id of current thread *\/$/;"	m	struct:userThreadInfo
initBufferPool	pooledBuffer.c	/^int initBufferPool(int bufferSize)$/;"	f
initDeviceListenThread	deviceMessage.c	/^int initDeviceListenThread()$/;"	f
initDeviceTable	device.c	/^int initDeviceTable(int dtlen)$/;"	f
initDeviceThreadPool	deviceMessage.c	/^int initDeviceThreadPool()$/;"	f
initTimeOutThread	detectTimeOut.c	/^int initTimeOutThread()$/;"	f
initUserListenThread	userMessage.c	/^int initUserListenThread()$/;"	f
initUserThreadPool	userMessage.c	/^int initUserThreadPool()$/;"	f
insertBlock	pooledBuffer.c	/^void insertBlock(MemBlock *newBlock)$/;"	f
insertDevice	device.c	/^void insertDevice(deviceTable *dt, char *deviceID, deviceNode *newDevice)$/;"	f
ipFormat	socketTools.c	/^void ipFormat(char *ip)$/;"	f
lastByte	pooledBuffer.h	/^	char *lastByte;			\/* position of the last byte *\/$/;"	m	struct:socketBuffer
lastHeartBeatTime	device.h	/^	long long lastHeartBeatTime;		\/* timestamp of last heartbeat message *\/$/;"	m	struct:deviceNode
leftByte	pooledBuffer.h	/^	int leftByte;			\/* number of bytes which haven't been used *\/$/;"	m	struct:socketBuffer
main	server.c	/^int main(int argc, char **argv) $/;"	f
makeFeedBackMessage	deviceMessage.c	/^void makeFeedBackMessage(char *message, int feedbackType)$/;"	f
makeMessageHeadToDevice	userMessage.c	/^void makeMessageHeadToDevice(char *sendBuffer, int userSockfd, int messageLen)$/;"	f
makeMessageHeadToUser	deviceMessage.c	/^void makeMessageHeadToUser(char *sendBuffer, int messageLen)$/;"	f
makeRegisterMessage	deviceMessage.c	/^void makeRegisterMessage(char *message, char *deviceId, char *password)$/;"	f
makeSocketNonBlocking	socketTools.c	/^int makeSocketNonBlocking (int sfd)$/;"	f
modifyEpollEvent	epollTools.c	/^int modifyEpollEvent(int epfd, int fd, struct epoll_event *event)$/;"	f
mutex	device.h	/^	pthread_mutex_t mutex;				\/* clock of current list *\/$/;"	m	struct:deviceList
mutex	pooledBuffer.h	/^	pthread_mutex_t mutex;$/;"	m	struct:MemPool
next	device.h	/^	struct deviceNode* next;			\/* pointer points to next device which share the hash key with current device *\/$/;"	m	struct:deviceNode	typeref:struct:deviceNode::deviceNode
next	pooledBuffer.h	/^	struct MemBlock *next;		\/* pointer to next block *\/$/;"	m	struct:MemBlock	typeref:struct:MemBlock::MemBlock
password	device.h	/^	char password[PASSWORD_SIZE+1];		\/* device password *\/ $/;"	m	struct:deviceNode
q	deviceMessage.h	/^	int q[DEVICE_MESSAGE_THREAD_SIZE+1];$/;"	m	struct:Pstack
q	userMessage.h	/^	int q[USER_MESSAGE_THREAD_SIZE+1];$/;"	m	struct:Ustack
readNonBlocking	socketTools.c	/^int readNonBlocking(int fd, char * buf, int n)$/;"	f
readNonBlocking_n	socketTools.c	/^int readNonBlocking_n(int fd, char * buf, int n)$/;"	f
recvDeviceMessage	deviceMessage.c	/^void *recvDeviceMessage(int *id)$/;"	f
recvUserMessage	userMessage.c	/^void *recvUserMessage(int *id)$/;"	f
sendFeedbackMessage	deviceMessage.c	/^int sendFeedbackMessage(int sockfd, int feedbackType)$/;"	f
sendRegisterMessage	deviceMessage.c	/^int sendRegisterMessage(int sockfd, char *deviceId, char *password)$/;"	f
size	device.h	/^	int size;							\/* size of device table *\/$/;"	m	struct:deviceTable
smartDeviceTable	device.c	/^deviceTable *smartDeviceTable;			\/* device table *\/$/;"	v
socketBuffer	pooledBuffer.h	/^typedef struct socketBuffer$/;"	s
socketBuffer	pooledBuffer.h	/^}socketBuffer;$/;"	t	typeref:struct:socketBuffer
socketBufferApplyNewBlock	pooledBuffer.c	/^MemBlock *socketBufferApplyNewBlock(socketBuffer *SOBuffer)$/;"	f
socketBufferFreeBlock	pooledBuffer.c	/^void socketBufferFreeBlock(socketBuffer *SOBuffer)$/;"	f
socketBufferInit	pooledBuffer.c	/^void socketBufferInit(socketBuffer *SOBuffer)$/;"	f
socketBufferReadMessage	pooledBuffer.c	/^int socketBufferReadMessage(int sockfd, socketBuffer *SOBuffer, int byteNumber)$/;"	f
socketBufferWriteMessage	pooledBuffer.c	/^int socketBufferWriteMessage(int sockfd, socketBuffer *SOBuffer)$/;"	f
socketHasData	socketTools.c	/^int socketHasData(int sockfd)$/;"	f
sockfd	deviceMessage.h	/^	int sockfd;						\/* socket fd  *\/$/;"	m	struct:deviceThreadInfo
sockfd	userMessage.h	/^	int sockfd;						\/* socket fd  *\/$/;"	m	struct:userThreadInfo
table	device.h	/^	deviceList *table;					\/* pointer of device table *\/$/;"	m	struct:deviceTable
tableHashKey	device.c	/^unsigned int tableHashKey(deviceTable *dt, char *deviceID)$/;"	f
tail	pooledBuffer.h	/^	MemBlock *tail;			\/* pointer to the last MemBlock in current buffer pool *\/$/;"	m	struct:MemPool
tail	pooledBuffer.h	/^	MemBlock *tail;			\/* pointer to the last MemBlock in those are used by current socket *\/$/;"	m	struct:socketBuffer
threadId	deviceMessage.h	/^	pthread_t threadId;				\/* Pid of current thread *\/$/;"	m	struct:deviceThreadInfo
threadId	userMessage.h	/^	pthread_t threadId;				\/* Pid of current thread *\/$/;"	m	struct:userThreadInfo
threadMutex	deviceMessage.h	/^	pthread_mutex_t threadMutex;	\/* clock of current thread *\/$/;"	m	struct:deviceThreadInfo
threadMutex	userMessage.h	/^	pthread_mutex_t threadMutex;	\/* clock of current thread *\/$/;"	m	struct:userThreadInfo
top	deviceMessage.h	/^	int top;$/;"	m	struct:Pstack
top	userMessage.h	/^	int top;$/;"	m	struct:Ustack
updateDevice	device.c	/^int updateDevice(deviceTable *dt, char *deviceID, char *password, long long lastHeartBeatTime)$/;"	f
usedByte	pooledBuffer.h	/^	int usedByte;			\/* number of bytes which have been used *\/$/;"	m	struct:socketBuffer
userEpollfd	userMessage.c	/^int userEpollfd;								\/* user epoll fd *\/$/;"	v
userListenPort	userMessage.c	/^const int userListenPort = 8001;				\/* user listen port *\/$/;"	v
userListenThread	userMessage.c	/^void *userListenThread()$/;"	f
userThreadInfo	userMessage.h	/^typedef struct userThreadInfo$/;"	s
userThreadInfo	userMessage.h	/^}userThreadInfo;$/;"	t	typeref:struct:userThreadInfo
userThreadInfoTable	userMessage.c	/^userThreadInfo userThreadInfoTable[USER_MESSAGE_THREAD_SIZE+1];		\/* paramenter table of threads which receive message from users *\/$/;"	v
ustime	register.c	/^long long ustime() $/;"	f
writeNonBlocking	socketTools.c	/^int writeNonBlocking(int fd, char * buf, int n)$/;"	f
writeNonBlocking_n	socketTools.c	/^int writeNonBlocking_n(int fd, char * buf, int n)$/;"	f
