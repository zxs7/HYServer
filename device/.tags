!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g $/;"	m
DEVICEID_SIZE	device.h	16;"	d
DEVICETABLE_SIZE	device.h	18;"	d
DEVICE_SIZE	device.h	17;"	d
EPOLL_LISTEN_MAX	epollTools.h	12;"	d
HBthreadPara	heartBeat.h	/^typedef struct HBthreadPara$/;"	s
HBthreadPara	heartBeat.h	/^}HBthreadPara;$/;"	t	typeref:struct:HBthreadPara
HBthreadParaTable	heartBeat.c	/^HBthreadPara HBthreadParaTable[HEARTBEAT_THREAD_SIZE];			\/* Sending heart beat thread parameter table *\/$/;"	v
HEARTBEAT_DEBUG	heartBeat.h	15;"	d
HEARTBEAT_INTERVAL	heartBeat.h	23;"	d
HEARTBEAT_THREAD_SIZE	heartBeat.h	22;"	d
HEARTBEAT_TIMEOUT	heartBeat.h	24;"	d
HEART_BEAT_MESSAGE_SIZE	heartBeat.h	21;"	d
MESSAGELEN_SIZE	userRequest.h	15;"	d
MESSAGE_HEAD	heartBeat.h	20;"	d
MESSAGE_HEAD_SIZE	recvMessage.h	20;"	d
OBJS	Makefile	/^OBJS = main.o heartBeat.o device.o socketTools.o epollTools.o recvMessage.o userRequest.o RPC.o$/;"	m
PASSWORD_SIZE	device.h	15;"	d
Pstack	recvMessage.h	/^typedef struct Pstack$/;"	s
Pstack	recvMessage.h	/^}Pstack; $/;"	t	typeref:struct:Pstack
Pstack_empty	recvMessage.c	/^int Pstack_empty(Pstack *ps)$/;"	f
Pstack_pop	recvMessage.c	/^void Pstack_pop(Pstack *ps)$/;"	f
Pstack_push	recvMessage.c	/^void Pstack_push(Pstack *ps, int k)$/;"	f
Pstack_top	recvMessage.c	/^int Pstack_top(Pstack *ps)$/;"	f
PthId	heartBeat.h	/^	pthread_t PthId;				\/* Pid of current thread  *\/$/;"	m	struct:HBthreadPara
PthId	recvMessage.h	/^	pthread_t PthId;				\/* Pid of current thread *\/$/;"	m	struct:recvThreadPara
RECV_MESSAGE_DEBUG	recvMessage.h	16;"	d
RECV_THREAD_SIZE	recvMessage.h	19;"	d
RPC	RPC.c	/^char *RPC(char *expression)$/;"	f
TARGET	Makefile	/^TARGET = device$/;"	m
USERSOCKFD_SIZE	userRequest.h	16;"	d
_DEVICE_H	device.h	4;"	d
_EPOLLTOOLS_H	epollTools.h	4;"	d
_HEARTBEAT_H	heartBeat.h	5;"	d
_MAIN_H	main.h	5;"	d
_RECV_MESSAGE_H	recvMessage.h	4;"	d
_RPC_H	RPC.h	4;"	d
_SOCKET_TOOL_H	socketTools.h	5;"	d
_USERREQUEST_H	userRequest.h	5;"	d
addEpollEvent	epollTools.c	/^int addEpollEvent(int epfd, int fd, struct epoll_event *event)$/;"	f
analysisHeartBeatMSG	heartBeat.c	/^void analysisHeartBeatMSG(char * message, char *deviceId, char *password)$/;"	f
analysisRequest	userRequest.c	/^char *analysisRequest(int deviceSockfd, char *message, int messageBodyLen)$/;"	f
analysisUserMessage	userRequest.c	/^void analysisUserMessage(char *recvBuffer, int *userSockfd, int *messageLen)$/;"	f
createANewDevice	heartBeat.c	/^ void createANewDevice()$/;"	f
createAndBind	socketTools.c	/^int createAndBind(int serverPort)$/;"	f
createAndConnect	socketTools.c	/^int createAndConnect(char *serverIP, int serverPort)$/;"	f
createSocketsAndConnect	heartBeat.c	/^int createSocketsAndConnect(char *serverIp, int serverPort, int deviceNumber)$/;"	f
deleteEpollEvent	epollTools.c	/^int deleteEpollEvent(int epfd, int fd)$/;"	f
deviceId	device.h	/^	char deviceId[DEVICEID_SIZE+1];		\/* device id *\/$/;"	m	struct:deviceNode
deviceNode	device.h	/^typedef struct deviceNode$/;"	s
deviceNode	device.h	/^}deviceNode;$/;"	t	typeref:struct:deviceNode
deviceSockfd	device.h	/^	int deviceSockfd;					\/* device socket fd *\/$/;"	m	struct:deviceNode
deviceTable	device.c	/^deviceNode *deviceTable;			\/* device table *\/$/;"	v
enable	device.h	/^	int enable;							\/* weather current node is available *\/$/;"	m	struct:deviceNode
epfd	epollTools.c	/^int epfd;							\/* epoll socket fd *\/$/;"	v
epollCreate	epollTools.c	/^int epollCreate()$/;"	f
first	heartBeat.h	/^	int first;						\/* deviceId of the first one *\/$/;"	m	struct:HBthreadPara
freeRecvThreadStack	recvMessage.c	/^Pstack freeRecvThreadStack;							\/* stack of free receving message threads *\/$/;"	v
freeRecvThreadStackMutex	recvMessage.c	/^pthread_mutex_t	freeRecvThreadStackMutex;			\/* clock of stack of free receving message threads *\/$/;"	v
getPeerAddress	socketTools.c	/^void getPeerAddress(int fd, char *ip, int *port)$/;"	f
handleUserRequest	userRequest.c	/^char *handleUserRequest(int userSockfd, int deviceSockfd, char *message, int messageBodyLen, int *retMessageLen)$/;"	f
heartBeatMessageType	heartBeat.c	/^int heartBeatMessageType(char * message)$/;"	f
initDeviceTable	device.c	/^int initDeviceTable(int dtlen)$/;"	f
initHBThreadPool	heartBeat.c	/^int initHBThreadPool()$/;"	f
initRecvThreadPool	recvMessage.c	/^int initRecvThreadPool()$/;"	f
ipFormat	socketTools.c	/^void ipFormat(char *ip)$/;"	f
last	heartBeat.h	/^	int last;						\/* deviceId behind the last one *\/$/;"	m	struct:HBthreadPara
lastHeartBeatTime	device.h	/^	long long lastHeartBeatTime;		\/* timestamp of last heartbeat message *\/$/;"	m	struct:deviceNode
listenEpollEvent	epollTools.c	/^void *listenEpollEvent()$/;"	f
main	main.c	/^int main() $/;"	f
makeHeartBeatMSG	heartBeat.c	/^void makeHeartBeatMSG(char *message, char *deviceId, char *password)$/;"	f
makeSocketNonBlocking	socketTools.c	/^int makeSocketNonBlocking (int sfd)$/;"	f
makeUserMessage	userRequest.c	/^void makeUserMessage(char *sendBuffer, int userSockfd, int messageLen, char *message)$/;"	f
modifyEpollEvent	epollTools.c	/^int modifyEpollEvent(int epfd, int fd, struct epoll_event *event)$/;"	f
mutex	device.h	/^	pthread_mutex_t mutex;				\/* device clock *\/$/;"	m	struct:deviceNode
mutex	recvMessage.h	/^	pthread_mutex_t mutex;			\/* clock of current thread *\/$/;"	m	struct:recvThreadPara
password	device.h	/^	char password[PASSWORD_SIZE+1];		\/* device password *\/ $/;"	m	struct:deviceNode
pthreadId	recvMessage.h	/^	int pthreadId;					\/* id of current thread *\/$/;"	m	struct:recvThreadPara
q	recvMessage.h	/^	int q[RECV_THREAD_SIZE+2];		\/* threads id *\/$/;"	m	struct:Pstack
readNonBlocking	socketTools.c	/^int readNonBlocking(int fd, char * buf, int n)$/;"	f
readOperand	RPC.c	/^int readOperand(char** expression)$/;"	f
readOperator	RPC.c	/^char readOperator(char** expression)$/;"	f
recvMessage	recvMessage.c	/^void *recvMessage(int *id)$/;"	f
recvThreadPara	recvMessage.h	/^typedef struct recvThreadPara$/;"	s
recvThreadPara	recvMessage.h	/^}recvThreadPara;$/;"	t	typeref:struct:recvThreadPara
recvThreadParaTable	recvMessage.c	/^recvThreadPara recvThreadParaTable[RECV_THREAD_SIZE];			\/* paramenter table of receive message threads *\/$/;"	v
resetDevice	device.c	/^void resetDevice(deviceNode* dt, int sockfd)$/;"	f
sendHBThread	heartBeat.c	/^void *sendHBThread(int *id)$/;"	f
sentHeartBeat	heartBeat.c	/^void sentHeartBeat(deviceNode* dt, int sockfd)$/;"	f
serverIP	heartBeat.c	/^char *serverIP = "172.18.11.117";				\/* server IP *\/$/;"	v
serverPort	heartBeat.c	/^const int serverPort = 8000;					\/* server Port *\/$/;"	v
sockfd	recvMessage.h	/^	int sockfd;						\/* socket fd which current thread is using *\/$/;"	m	struct:recvThreadPara
threadId	heartBeat.h	/^	int threadId;					\/* id of current thread *\/$/;"	m	struct:HBthreadPara
top	recvMessage.h	/^	int top;						\/* top of stack *\/$/;"	m	struct:Pstack
updateDevice	device.c	/^void updateDevice(deviceNode* dt, int sockfd, char *deviceId, char *password)$/;"	f
ustime	device.c	/^long long ustime() $/;"	f
writeNonBlocking	socketTools.c	/^int writeNonBlocking(int fd, char * buf, int n)$/;"	f
